{"version":3,"sources":["component/AddWish.js","component/CreateWish.js","component/NewWish.js","component/App.js","reportWebVitals.js","index.js"],"names":["AddWish","props","day","Date","toLocaleString","active","important","style","color","name","data","onClick","change","id","delete","CreateWish","activeWishes","wishes","filter","wish","discableWishes","sort","a","b","map","discable","length","fontSize","splice","NewWish","state","text","date","toISOString","slice","checked","handleText","e","target","value","setState","handleChecked","handleDate","handleSend","preventDefault","add","minDate","maxDate","onSubmit","this","padding","type","onChange","placeholder","min","max","Component","App","counter","handleChangeActive","forEach","getTime","handleDelete","handleAdd","push","alert","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f14884a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AddWish = (props) => { // komponent funkcyjny tworzący bazę zmapowanych elementów i tworzy strkturę komponentu wyświetlanego w porzednim, wywołujący funkcje\r\n    const style = { color: \"red\" } // style do wartośc important czyli elementu na czerwono\r\n    const day = new Date(props.day).toLocaleString()// konwetowanie obiektu date na datę i godzinę \r\n    if (props.active) { // jeżeli active jest true zwróć tą zawartość (życzenia do zrobienia)\r\n        return (\r\n            <>\r\n            <li>\r\n                {props.important? <strong style={style}>{props.name} </strong> : <strong>{props.name}</strong>} {/* instrukcja zmieniająca kolor tekstu w zależności od statusu checkboxu inportant */}\r\n                <em> zrobić do </em>\r\n                <span> {props.data} </span> {/* wyświetlanie daty utworzenia życzenia */}\r\n                <button onClick={() => props.change(props.id)}>Zrobione</button> {/* na podstawie id z obiekty state w App.js wywoływana jest funkcja zmieniająca active na false klikniętego elementu */}\r\n                <button onClick={() => props.delete(props.id)}>X</button> {/* funkcja filtrująca która usuwa kliknięty element z listy */}\r\n            </li>\r\n                <br />\r\n                </>\r\n             )\r\n        }\r\n    else {// jeżeli active  jest false zwróć to (zrobione życzenia)\r\n        return (\r\n            <li>\r\n                <strong>{props.name}</strong>\r\n                <em> ( zrobione dnia {day} ) </em> {/* Wyświetlanie daty i godziny zrobionego życzenia*/}\r\n                <button onClick={() => props.delete(props.id)}>X</button>\r\n             </li>\r\n             )\r\n      }\r\n    \r\n}\r\n \r\nexport default AddWish;","import React from 'react'; // import bibloteki React Component\r\nimport AddWish from './AddWish' // import komponentu funkcyjnego przechowującego przyciski które wywołują metody usuwające i zmieniające zadania na nieaktywne, tworzy tam też zmapowaną strukturę która jest wyświetlana tutaj w tym komponencie\r\nconst CreateWish = (props) => { //\r\n    const style = {fontSize:12, color: \"red\"} // zmienna przechowująca style do komunikatu zrbionych życzeń \r\n    \r\n    const activeWishes = props.wishes.filter(wish => wish.active) // nowa tablica przefiltrowanych aktywnych życzeń\r\n    const discableWishes = props.wishes.filter(wish => !wish.active) // nowa tablica przefiltrowanych nieaktywnych życzeń\r\n    \r\n    activeWishes.sort((a, b) => { // nowa tablica przesortowanych elementów od A do Z czyli od najmniejszej do najwiekszej\r\n        if (a.name < b.name) return -1;\r\n        if (a.name > b.name) return 1;\r\n         return 0\r\n    })\r\n    discableWishes.sort((a, b) => b.day - a.day) // nowa talbica przesortowanych elementów na podstawie milisekund obiektu date z obiektu state App.js\r\n    \r\n    const active = activeWishes.map(wish => ( // mapowanie przefiltrowanej tablicy z aktywnymi życzeniami i tworzenie na jej podstawie nowego komponentu który tworzy zawartość na podstawie zwracanej w tym komponencie\r\n        <AddWish key={wish.id} id={wish.id} name={wish.name} delete = {props.delete} change = {props.change} active = {wish.active} data = {wish.data}  important = {wish.important}/>\r\n    ))\r\n    const discable= discableWishes.map(wish => ( // mapowanie przefiltrowanej tablicy z nieaktywnymi życzeniami i tworzenie na jej podstawie nowego komponentu który tworzy zawartość na podstawie zwracanej w tym komponencie\r\n        <AddWish key={wish.id} id={wish.id}  name={wish.name} delete = {props.delete} active = {wish.active} data = {wish.data} day = {wish.day}  />\r\n    ))\r\n    return (\r\n        <>\r\n        <strong>Wishes ({activeWishes.length}) </strong> {/* długość aktywnych indexów  z przefiltrowanej tablicy */}\r\n          \r\n        <div>{active} </div>\r\n            \r\n        <hr />\r\n     \r\n            <strong>Done Wishes ({discableWishes.length}) {/* długość nieaktywnych indexów  z przefiltrowanej tablicy */}\r\n                <br/>\r\n                {discableWishes.length > 5 ? <span style={style}> (appear only first 5 wishes)</span> : null} </strong> {/* jeżeli jest wiecej niż 5 niekatywnych elementów wyświetl ten komunikat */}\r\n            \r\n            <div>{discable.splice(0, 5)} </div> {/*  wytnij tylko 5 niekatywnych elementów z tablicy discable */}\r\n        </>\r\n     );\r\n}\r\n \r\nexport default CreateWish;","\r\nimport React, { Component } from 'react';\r\n\r\nclass NewWish extends Component { // komponent przechowujący wszystkie dane i funkcje służące do stworzenia nowego obiektu do tablicy w obiekcie state komponentu App.js\r\n   \r\n    state = { // przechowuje zawartości inputa text, checked inputa checkbox i datę uciętą metodą slice() która po ucięciu pokazuje DD-MM-YY\r\n        text: \"\",\r\n        date: new Date().toISOString().slice(0,10),\r\n        checked: false,\r\n    }\r\n    handleText = (e) => { // funkcja onChange zmieniająca zawartośc obiektu statne na value z inputa text\r\n        const text = e.target.value\r\n        this.setState(\r\n            {\r\n            text\r\n            }\r\n        );\r\n    }\r\n    handleChecked = (e) => { // funkcja onChange zmieniająca zawartośc obiektu statne na checked z inputa checkbox\r\n        const checked = e.target.checked\r\n        this.setState(\r\n            {\r\n                checked\r\n            }\r\n        );\r\n    }\r\n    handleDate = (e) => { // funkcja onChange zmieniająca zawartośc obiektu statne na value z inputa date\r\n        const date = e.target.value\r\n        this.setState(\r\n            {\r\n            date\r\n            }\r\n        );\r\n    }\r\n    handleSend = (e) => { // funkcja przekazywana jako props do komponentu App.js wywołująca dodanie nowego obiektu do state w App.js\r\n        e.preventDefault()\r\n        const { text , date , checked} = this.state // desktukturyzacja \r\n        const add = this.props.add(text , date , checked)  // przekazywanie argumentów destrukturyzacji propsem do komponentu App.js(w nim jest jako add który wywołuje tamtejszą funkcje handle add i przekazuje jej parametry stąd)\r\n        if (add) { \r\n            this.setState({ // czyszczenie pól w obiekcie state po kliknięciu jeżeli funkcja handleAdd zwraca true\r\n                text: \"\",\r\n                date: new Date().toISOString().slice(0, 10),\r\n                checked: false\r\n            })\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const minDate = new Date().toISOString().slice(0, 10) // tworzeie minimalnej daty do inputa date\r\n        let maxDate = minDate.slice(0,4) * 1 + 1 // tworzenie maksmalnej daty do inputa date tworząc rok\r\n        maxDate = maxDate + \"-12-29\" // łączenie maksymalnej daty w całość dodając miesiać i dzień \r\n        return (\r\n            <>\r\n                <form onSubmit = {this.handleSend}> {/* formularz zawierający inputy uzupełniające obiekt state i przycisk dodający nowy obiekt(nowe życzenie)*/}\r\n                <h2> Add New Wish </h2>\r\n                <input style = {{fontSize:20, padding:10}} type=\"text\" onChange = {this.handleText} placeholder=\"dodaj życzenie\" value={this.state.text} /> <input type=\"checkbox\" onChange = {this.handleChecked}  checked={this.state.checked}/> <strong> priorytet</strong>\r\n                <br />\r\n                <br />\r\n                <strong>do kiedy</strong> <input type=\"date\" onChange = {this.handleDate}  value = {this.state.date} min = {minDate} max = {maxDate} />\r\n                <br />\r\n                <br />\r\n                <button style = {{ fontSize: 20 , color: \"blue\" , padding: 10 }}>Add Wish</button>\r\n                </form>\r\n                \r\n            </>    \r\n          );\r\n    }\r\n  \r\n}\r\n \r\nexport default NewWish;","import React, { Component } from 'react'; // import bibloteki React Component\nimport Createwish from './CreateWish'; //(sekcja stworzone i spełnione życzenia) import komponentu funkcyjnego który filtruje, sortuje, mapuje i wyświetla obiekt state tego komponentu\nimport NewWish from \"./NewWish\" //(sekcja górna tworząca nowe życzenie) import komponentu klasowego który tworzy nowy obiekt i pushuje go do tablicy w tym komponencie\nimport './App.css';\n\nclass App extends Component {  // komponent główny przechowujący życzenia \n  counter = 4 // licznik id do nowego życzenia\n  state = {\n    wishes: [\n      {\n        id: 0, // unikalne id dzięki któremu rozpoznaję kliknięty element, służy też to przpisywania wartości key do komponentu importowanego\n        name: \"poćwiczyć\", // nazwa życzenia zmieniana imputem \n        active: true, // właściwość na podstawie której stwierdzam niespełnione życzenie i spełnione\n        data: \"2021-05-07\", // data która stwierdza termin życzenia\n        important: true, // checkbox który zmienia kolor życzenia w zależności czy jest ważne czy nie\n        day: null // data ukończenia życzenia\n      },\n      {\n        id: 1,\n        name: \"ugotować obiad\",\n        active: true,\n        data: \"2021-08-01\",\n        important: false,\n        day: null\n      },\n      {\n        id: 2,\n        name: \"pograć w fife\",\n        active: true,\n        data: \"2021-10-23\",\n        important: false,\n        day: null\n      },\n      {\n        id: 3,\n        name: \"wykosić trawę\",\n        active: true,\n        data: \"2021-01-30\",\n        important: true,\n        day: null\n      },\n    ],\n  }\n\n  handleChangeActive = (id) => { //(przycisk komponentu AddWish) funkcja zmieniająca status życzenia na zrobione \n    const wishes = [...this.state.wishes] // kopia tablicy na podstawie której będzie aktualizowany obiekt state z główą tablicą \n    wishes.forEach(wish => { // metoda fotEach która przechodzi przez wszystkie elementy i wybiera ten kliknięty \n      if (wish.id === id) {\n        wish.active = false;\n        wish.day = new Date().getTime()  \n      }\n    })\n    this.setState({\n      wishes\n    })\n  }\n\n  handleDelete = (id) => {\n    const wishes = this.state.wishes.filter(wish => wish.id !== id) // zwraca tablicę i filtruje  tylko te elementy które są różne od klikniętego id\n    \n    this.setState({\n      wishes // aktualizuje główną tablicę obiektu state na przefiltrowaną kopię z tej metody\n    })\n  }\n  handleAdd = (text, date, checked) => { // metoda dodająca nowy obiekt do tablicy z zyczeniami\n    const wish = // nowy obiekt z właściwościami pushowany do obiektu state z zyczeniami\n    {\n      id: this.counter, // właściwośc z licznika dla ID nowego życzenia\n      name: text, // tytuł nowego życzenia pobierany z inputa obiektu state komponentu NewWish\n      active: true, // domyślna wartość aktywnego nowego zyczenia\n      data: date, // wartość obiektu date konwertowana na datę z obektu state komponetu NewWish\n      important: checked, // wartość checkboxa obiekty state komponentu NewWish\n      day: null // domyślna wartość która służy do zrobionych życzeń \n    }\n    const wishes = [...this.state.wishes] // kopia tablicy obiektu state\n    if (text) { // jeżeli w impucie text jest cos wpisane\n      wishes.push(wish) // pushuj do kopii tablicy nowy obiekt\n      this.setState({\n        wishes // aktualizowanie głównego obiektu state na kopię zmienioną tutaj\n      })\n    }\n    else {\n      alert(\"Wpisz życzenie\")\n    }\n    this.counter++ // zwiększanie licznika w celu nadania nowego ID dla nowego obiektu\n    return true // jeżeli metoda zwraca tru uruchom dodawanie\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NewWish add={this.handleAdd} /> {/* Komponent klasowy tworzący właściwości do nowego życzenia i przekazujący do tego funkcję tworzącą nowe życzenie  */}\n        <hr /> {/* kreska odstępu  */}\n        <Createwish wishes={this.state.wishes} delete={this.handleDelete} change={this.handleChangeActive} />\n        {/* komponent funkcyjny filtrujący nowe życzenia i usuwający je */}\n      </div>\n    );\n  }\n}\nexport default App  \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}